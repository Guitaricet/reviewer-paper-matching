import argparse
import pandas
import json

print_manager_coi_track = "Semantics"

if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("--suggestion_file", type=str, required=True, help="The suggestion file generated by suggest_reviewers.py")
    parser.add_argument("--track", type=str, required=True, help="current_track")
    parser.add_argument("--date", type=str, required=True, help="current date")
    #parser.add_argument("--submission_in", type=str, default=None, help="The submission CSV file")

    args = parser.parse_args()
    with open('tracks.txt','r') as tfile:
        with open('u_tracks.txt','r') as t2file:
            t1list=[x.strip() for x in tfile.readlines()]
            t2list=[x.strip() for x in t2file.readlines()]
            tdict=dict(zip(t2list,t1list))

    # Load the data
    with open(args.suggestion_file, "r") as f:
        submissions = [json.loads(x) for x in f]

    #for submission in submissions:
    #    sid = submission['startSubmissionId']
    #    print(f'{sid}:'+';'.join([x['startUsername'] for x in submission['assignedReviewers']]))
    
    full_submission = pandas.read_csv("./scratch/Submission_Information.csv", skipinitialspace=True, quotechar='"', encoding = "UTF-8")
    sid2status = {}
    for sid, status in zip(full_submission["Submission ID"], full_submission["Acceptance Status"]):
        if 'Reject' in status:
            continue
        elif 'long' in status.lower():
            sid2status[str(sid)] = 'Long'
        elif 'short' in status.lower():
            sid2status[str(sid)] = 'Short'
        else:
            print('status error!')
            sys.exit(1)
    
    profiles = pandas.read_csv("./scratch/Profile_Information.csv", skipinitialspace=True, quotechar='"', encoding = "UTF-8")
    review2load = {}
    for startid, role, load in zip(profiles["startid"], profiles["Roles"], profiles["Reviewer's Load"]):
        if 'Author' in role or 'manager' in role or tdict[args.track] not in role or load != load:
            continue
        review2load[startid] = int(load)
    
    submission = pandas.read_csv("./scratch/Submission_Information.csv", skipinitialspace=True, quotechar='"', encoding = "UTF-8")
    track2sid = {}
    for sid, track in zip(submission['Submission ID'], submission['Track']):
        if track not in track2sid:
            track2sid[track] = set()
        track2sid[track].add(sid)

    manager2coi = {}
    all_manager_coi = {}
    with open('./scratch/track_manager.txt', 'r') as fin:
        for lines in fin:
            m, t, u_t = lines.strip().split('\t')
            if 'Reject' in t:
                continue
            all_manager_coi[m] = {'track': tdict[u_t], 'coi': set()}
            if u_t == args.track:
                manager2coi[m] = set()
            
    with open('./scratch/all_cois.txt', 'r') as fin:
        for lines in fin:
            arr = lines.strip().split(':')
            if arr[0] in all_manager_coi:
                all_manager_coi[arr[0]]['coi'].update(arr[1:])
            if arr[0] not in manager2coi:
                continue
            manager2coi = set(arr[1:])
    
    bids = pandas.read_csv("./scratch/Bid_Information.csv", skipinitialspace=True, quotechar='"', encoding = "UTF-8")
    if args.track == print_manager_coi_track:
        for m in all_manager_coi:
            if m not in bids:
                continue
            for sid, bid in zip(bids["Submission ID/Username"], bids[m]):
                if bid == '4':
                    all_manager_coi[m]['coi'].add(sid)
    
    for m in manager2coi:
        if m not in bids:
            continue
        for sid, bid in zip(bids["Submission ID/Username"], bids[m]):
            if bid == '4':
                manager2coi[m].add(sid)
    
    with open('./scratch/ac_cois.txt', 'r') as fin:
        for lines in fin:
            m, sid = lines.strip().split(' ')
            all_manager_coi[m]['coi'].add(sid)
            if m in manager2coi:
                print("[ac_cois] ac:\t%s\tsid:\t%s" % (m, sid))
                manager2coi[m].add(sid)
    
    if args.track == print_manager_coi_track:
        all_manager_coi_list = []
        for m, coi_dict in all_manager_coi.items():
            coi_list = list(coi_dict['coi'] & track2sid[coi_dict['track']])
            coi_list.sort(key = lambda x: int(x))
            all_manager_coi_list.append([coi_dict['track'], m, coi_list])
        all_manager_coi_list.sort(key = lambda x: x[0])
        with open('./res.all_manager_coi.txt', 'w') as fout:
            for t, m, coi_list in all_manager_coi_list:
                fout.write('%s\t%s\t%s\n' % (t, m, ','.join([str(x) for x in coi_list])))

    for m, s in manager2coi.items():
        print('Track:\t%s, Manager:\t%s, COI_NUM:\t%d' % (args.track, m, len(s)))
    manager2fout = {}
    for m in manager2coi:
        manager2fout[m] = open('./output/softconf_upload_with_detail_by_manager/start-assignments_%s_%s_%s.txt' % (args.track, args.date, m), 'w')
    pc_out = open('./output/softconf_upload_with_detail_by_manager/start-assignments_pc_%s.txt' % args.date, 'a+')
    fout_long = open('./output/softconf_upload_by_track/start-assignments_%s_%s_Long.csv' % (args.track, args.date), 'w')
    fout_short = open('./output/softconf_upload_by_track/start-assignments_%s_%s_Short.csv' % (args.track, args.date), 'w')
    fout_long_detail = open('./output/softconf_upload_with_detail/start-assignments_%s_%s_Long.txt' % (args.track, args.date), 'w')
    fout_short_detail = open('./output/softconf_upload_with_detail/start-assignments_%s_%s_Short.txt' % (args.track, args.date), 'w')
    fout_long_txt = open('./output/softconf_upload_by_track_of_txt/start-assignments_%s_%s_Long.txt' % (args.track, args.date), 'w')
    fout_short_txt = open('./output/softconf_upload_by_track_of_txt/start-assignments_%s_%s_Short.txt' % (args.track, args.date), 'w')
    fout_coi_txt = open('./output/softconf_upload_by_track_of_coi/start-assignments_%s_%s_COI.txt' % (args.track, args.date), 'w')
    fout_coi_txt.write('Area\tAC start id\tpaper submission id\tpaper title\tpaper authors\n')

    for submission in submissions:
        sid = str(submission['startSubmissionId'])
        softconf_str = '%s:%s' % (sid, ';'.join([x['startUsername'] for x in submission['assignedReviewers']]))
        softconf_txt = '%s:%s:' % (sid, ':'.join([x['startUsername'] for x in submission['assignedReviewers']]))
        
        title = submission["title"].replace('\t', ' ')
        abstract = submission["paperAbstract"].replace('\t', ' ')
        track = submission["Track"]
        similar_papers = []
        submission["similarPapers"].sort(key = lambda x: x["score"], reverse=True)
        for papers in submission["similarPapers"]:
            similar_papers += [papers["title"].replace('\t', ' '), str(round(papers["score"], 3))]
        submission["topSimReviewers"].sort(key = lambda x: x["score"], reverse=True)
        similar_reviewers = []
        for reviewer in submission["topSimReviewers"]:
            similar_reviewers += [reviewer["names"][0], reviewer["startUsername"], str(reviewer["level"]), str(round(reviewer["score"], 3))]
        assigned_reviewers = []
        submission["assignedReviewers"].sort(key = lambda x: x["score"], reverse=True)
        for reviewer in submission["assignedReviewers"]:
            url = "https://www.semanticscholar.org/author/%s" % (reviewer["ids"][0])
            assigned_reviewers += [reviewer["names"][0], reviewer["startUsername"], str(reviewer["level"]), str(round(reviewer["score"], 3)), str(review2load[reviewer["startUsername"]]), url, "link"]
        detail_list = [track, sid, sid2status[sid], title, abstract] + assigned_reviewers + similar_papers + similar_reviewers
        if sid2status[sid] == 'Long':
            fout_long.write(softconf_str + '\n')
            fout_long_txt.write(softconf_txt + '\n')
            fout_long_detail.write(('\t'.join(detail_list)).replace('\n', ' ').replace('\r', ' ') + '\n')
        else:
            fout_short.write(softconf_str + '\n')
            fout_short_txt.write(softconf_txt + '\n')
            fout_short_detail.write(('\t'.join(detail_list)).replace('\n', ' ').replace('\r', ' ') + '\n')
        
        for m, coi_set in manager2coi.items():
            if sid in coi_set or int(sid) in coi_set:
                authors = [a["name"] for a in submission["authors"]]
                coi_out = [track, m, sid, title, ';'.join(authors)]
                fout_coi_txt.write('\t'.join(coi_out) + '\n')

        is_print = False
        for m, f in manager2fout.items():
            if sid not in manager2coi[m]:
                f.write(('\t'.join(detail_list)).replace('\n', ' ').replace('\r', ' ') + '\n')
                is_print = True
        if not is_print:
            pc_out.write(('\t'.join(detail_list)).replace('\n', ' ').replace('\r', ' ') + '\n')

    fout_long.close()
    fout_short.close()
    fout_long_txt.close()
    fout_short_txt.close()
    fout_long_detail.close()
    fout_short_detail.close()
    fout_coi_txt.close()
    pc_out.close()
    for m, f in manager2fout.items():
        f.close()
    print("finish deal track: %s" % args.track)

